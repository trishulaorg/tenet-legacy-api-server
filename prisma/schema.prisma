datasource db {
  provider             = "mysql"
  url                  = env("DATABASE_URL")
  referentialIntegrity = "prisma"
}

generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["referentialIntegrity"]
}

generator nexusPrisma {
  provider        = "nexus-prisma"
  previewFeatures = ["referentialIntegrity"]
}

enum ContentType {
  TEXT
  LINK
  IMAGE
  VIDEO
  EMOJI
}

model AllowedWritingRole {
  id     Int     @id @default(autoincrement())
  create Boolean @default(false)
  read   Boolean @default(false)
  update Boolean @default(false)
  delete Boolean @default(false)

  Boards_defaultBoardRole  Board[] @relation("Boards_defaultBoardRole")
  Boards_defaultPostRole   Board[] @relation("Boards_defaultPostRole")
  Boards_defaultThreadRole Board[] @relation("Boards_defaultThreadRole")
  Boards_defaultReplyRole  Board[] @relation("Boards_defaultReplyRole")

  Posts_defaultPostRole   Post[] @relation("Posts_defaultPostRole")
  Posts_defaultThreadRole Post[] @relation("Posts_defaultThreadRole")
  Posts_defaultReplyRole  Post[] @relation("Posts_defaultReplyRole")

  SystemAdministratorRoles_boardRole  SystemAdministratorRole[] @relation("SystemAdministratorRoles_boardRole")
  SystemAdministratorRoles_postRole   SystemAdministratorRole[] @relation("SystemAdministratorRoles_postRole")
  SystemAdministratorRoles_threadRole SystemAdministratorRole[] @relation("SystemAdministratorRoles_threadRole")
  SystemAdministratorRoles_replyRole  SystemAdministratorRole[] @relation("SystemAdministratorRoles_replyRole")

  BoardRoles_boardRole  BoardRole[] @relation("BoardRoles_boardRole")
  BoardRoles_postRole   BoardRole[] @relation("BoardRoles_postRole")
  BoardRoles_threadRole BoardRole[] @relation("BoardRoles_threadRole")
  BoardRoles_replyRole  BoardRole[] @relation("BoardRoles_replyRole")

  PostRoles_postRole   PostRole[] @relation("PostRoles_postRole")
  PostRoles_threadRole PostRole[] @relation("PostRoles_threadRole")
  PostRoles_replyRole  PostRole[] @relation("PostRoles_replyRole")
}

model User {
  id                  Int                @id @default(autoincrement())
  createdAt           DateTime           @default(now())
  token               String             @unique
  thirdPartyAPITokens ThirdPartyAPIKey[] @relation()
  personas            Persona[]
}

model Persona {
  id                          Int                       @id @default(autoincrement())
  createdAt                   DateTime                  @default(now())
  name                        String                    @unique @db.VarChar(25)
  screenName                  String                    @db.VarChar(30)
  iconUrl                     String                    @db.Text
  FollowingBoards             FollowingBoard[]
  modelatingBoards            Board[]                   @relation()
  followingUsers              PersonaRelation[]         @relation("destPersona")
  followedUsers               PersonaRelation[]         @relation("srcPersona")
  votesOnPosts                VoteOnPost[]
  votesOnThreads              VoteOnThread[]
  votesOnReplies              VoteOnReply[]
  user                        User                      @relation(fields: [userId], references: [id])
  userId                      Int
  posts                       Post[]
  threads                     Thread[]
  replies                     Reply[]
  systemAdministratorRoles    SystemAdministratorRole[]
  boardRoles                  BoardRole[]
  postRoles                   PostRole[]
  bot                         Bot?
  notificationEvent_senders   NotificationEvent[]       @relation("NotificationEvent_sender")
  notificationEvent_receivers NotificationEvent[]       @relation("NotificationEvent_receiver")
  directMesswage_senders      DirectMessage[]           @relation("DirectMessage_sender")
  direectMessages_receivers   DirectMessage[]           @relation("DirectMessage_receiver")
  PersonaProfile              PersonaProfile?
}

model PersonaRelation {
  id            Int      @id @default(autoincrement())
  createdAt     DateTime @default(now())
  srcPersonaId  Int
  srcPersona    Persona  @relation("srcPersona", fields: [srcPersonaId], references: [id])
  destPersonaId Int
  destPersona   Persona  @relation("destPersona", fields: [destPersonaId], references: [id])
}

model VoteOnPost {
  id          Int      @id @default(autoincrement())
  createdAt   DateTime @default(now())
  createdById Int
  createdBy   Persona  @relation(fields: [createdById], references: [id])
  weight      Int
}

model VoteOnThread {
  id          Int      @id @default(autoincrement())
  createdAt   DateTime @default(now())
  createdById Int
  createdBy   Persona  @relation(fields: [createdById], references: [id])
  weight      Int
}

model VoteOnReply {
  id          Int      @id @default(autoincrement())
  createdAt   DateTime @default(now())
  createdById Int
  createdBy   Persona  @relation(fields: [createdById], references: [id])
  weight      Int
}

model Board {
  id                  String             @id @db.Char(26)
  title               String             @unique @db.VarChar(30)
  createdAt           DateTime           @default(now())
  deletedAt           DateTime?
  description         String             @db.VarChar(2000)
  moderators          Persona[]          @relation()
  followedBy          FollowingBoard[]
  posts               Post[]
  threads             Thread[]
  roles               BoardRole[]
  defaultBoardRoleId  Int
  defaultBoardRole    AllowedWritingRole @relation("Boards_defaultBoardRole", fields: [defaultBoardRoleId], references: [id])
  defaultPostRoleId   Int
  defaultPostRole     AllowedWritingRole @relation("Boards_defaultPostRole", fields: [defaultPostRoleId], references: [id])
  defaultThreadRoleId Int
  defaultThreadRole   AllowedWritingRole @relation("Boards_defaultThreadRole", fields: [defaultThreadRoleId], references: [id])
  defaultReplyRoleId  Int
  defaultReplyRole    AllowedWritingRole @relation("Boards_defaultReplyRole", fields: [defaultReplyRoleId], references: [id])
}

model FollowingBoard {
  id        String    @id @db.Char(26)
  createdAt DateTime  @default(now())
  deletedAt DateTime?
  board     Board     @relation(fields: [boardId], references: [id])
  boardId   String
  persona   Persona   @relation(fields: [personaId], references: [id])
  personaId Int

  @@unique([boardId, personaId, deletedAt], name: "followingBoardUnique")
}

model Post {
  id                  String             @id @db.Char(26)
  createdAt           DateTime           @default(now())
  deletedAt           DateTime?
  title               String             @db.VarChar(50)
  contentType         ContentType
  content             String             @db.VarChar(2000)
  threads             Thread[]
  board               Board?              @relation(fields: [boardId], references: [id])
  boardId             String?            
  persona             Persona            @relation(fields: [personaId], references: [id])
  personaId           Int
  roles               PostRole[]
  defaultPostRoleId   Int
  defaultPostRole     AllowedWritingRole @relation("Posts_defaultPostRole", fields: [defaultPostRoleId], references: [id])
  defaultThreadRoleId Int
  defaultThreadRole   AllowedWritingRole @relation("Posts_defaultThreadRole", fields: [defaultThreadRoleId], references: [id])
  defaultReplyRoleId  Int
  defaultReplyRole    AllowedWritingRole @relation("Posts_defaultReplyRole", fields: [defaultReplyRoleId], references: [id])
}

model Thread {
  id          String      @id @db.Char(26)
  createdAt   DateTime    @default(now())
  deletedAt   DateTime?
  content     String      @db.VarChar(500)
  contentType ContentType
  replies     Reply[]
  board       Board?       @relation(fields: [boardId], references: [id])
  boardId     String?
  postId      String
  Post        Post        @relation(fields: [postId], references: [id])
  persona     Persona     @relation(fields: [personaId], references: [id])
  personaId   Int
}

model Reply {
  id          String      @id @db.Char(26)
  contentType ContentType
  content     String      @db.VarChar(500)
  createdAt   DateTime    @default(now())
  deletedAt   DateTime?
  thread      Thread      @relation(fields: [threadId], references: [id])
  threadId    String
  persona     Persona     @relation(fields: [personaId], references: [id])
  personaId   Int
}

model UploadedImage {
  id       String @id @db.Char(26)
  parentId String @db.Char(26)
  fileUrl  String @db.Text
}

model SystemAdministratorRole {
  id           String             @id @db.Char(26)
  personas     Persona[]
  allowAll     Boolean            @default(false)
  roleManager  Boolean            @default(false)
  boardRoleId  Int
  boardRole    AllowedWritingRole @relation("SystemAdministratorRoles_boardRole", fields: [boardRoleId], references: [id])
  postRoleId   Int
  postRole     AllowedWritingRole @relation("SystemAdministratorRoles_postRole", fields: [postRoleId], references: [id])
  threadRoleId Int
  threadRole   AllowedWritingRole @relation("SystemAdministratorRoles_threadRole", fields: [threadRoleId], references: [id])
  replyRoleId  Int
  replyRole    AllowedWritingRole @relation("SystemAdministratorRoles_replyRole", fields: [replyRoleId], references: [id])
}

model BoardRole {
  id           String             @id @db.Char(26)
  personas     Persona[]
  boards       Board[]
  allowAll     Boolean            @default(false)
  roleManager  Boolean            @default(false)
  boardRoleId  Int
  boardRole    AllowedWritingRole @relation("BoardRoles_boardRole", fields: [boardRoleId], references: [id])
  postRoleId   Int
  postRole     AllowedWritingRole @relation("BoardRoles_postRole", fields: [postRoleId], references: [id])
  threadRoleId Int
  threadRole   AllowedWritingRole @relation("BoardRoles_threadRole", fields: [threadRoleId], references: [id])
  replyRoleId  Int
  replyRole    AllowedWritingRole @relation("BoardRoles_replyRole", fields: [replyRoleId], references: [id])
}

model PostRole {
  id           String             @id @db.Char(26)
  personas     Persona[]
  posts        Post[]
  allowAll     Boolean            @default(false)
  roleManager  Boolean            @default(false)
  postRoleId   Int
  postRole     AllowedWritingRole @relation("PostRoles_postRole", fields: [postRoleId], references: [id])
  threadRoleId Int
  threadRole   AllowedWritingRole @relation("PostRoles_threadRole", fields: [threadRoleId], references: [id])
  replyRoleId  Int
  replyRole    AllowedWritingRole @relation("PostRoles_replyRole", fields: [replyRoleId], references: [id])
}

enum ThirdPartyAPIKeyType {
  BOT
  USER
}

model ThirdPartyAPIKey {
  id        String               @id @db.Char(26)
  type      ThirdPartyAPIKeyType
  token     String               @unique
  userId    Int
  user      User                 @relation(fields: [userId], references: [id])
  bot       Bot?
  createdAt DateTime             @default(now())
  revokedAt DateTime?
}

model Bot {
  id                 String           @id @db.Char(26)
  persona            Persona          @relation(fields: [personaId], references: [id])
  personaId          Int              @unique
  thirdPartyAPIKey   ThirdPartyAPIKey @relation(fields: [thirdPartyAPIKeyId], references: [id])
  thirdPartyAPIKeyId String           @unique @db.Char(26)
}

enum NotificationEventType {
  NEW_FOLLOWER
  LIKE
  COMMENT
  DIRECT_MESSAGE
}

model NotificationEvent {
  id         String                @id @db.Char(26)
  sender     Persona               @relation("NotificationEvent_sender", fields: [senderId], references: [id])
  senderId   Int
  receiver   Persona               @relation("NotificationEvent_receiver", fields: [receiverId], references: [id])
  receiverId Int
  type       NotificationEventType
  createdAt  DateTime              @default(now())
  readAt     DateTime?
}

model DirectMessage {
  id               String   @id @db.Char(26)
  sender           Persona  @relation("DirectMessage_sender", fields: [senderId], references: [id])
  senderId         Int
  receiver         Persona  @relation("DirectMessage_receiver", fields: [receiverId], references: [id])
  receiverId       Int
  encryptedContent String   @db.Text
  iv String    @db.Text
  createdAt        DateTime @default(now())
}

model PersonaProfile {
  id          String   @id @db.Char(26)
  persona     Persona  @relation(fields: [personaId], references: [id])
  personaId   Int      @unique
  createdAt   DateTime @default(now())
  bio         String   @db.Text
  headerImage String
}
