### This file was generated by Nexus Schema
### Do not make changes to this file directly


type AllowedWritingRole {
  create: Boolean!
  delete: Boolean!
  id: Int!
  read: Boolean!
  update: Boolean!
}

type Board {
  createdAt: DateTime!
  defaultBoardRole: AllowedWritingRole!
  defaultPostRole: AllowedWritingRole!
  defaultReplyRole: AllowedWritingRole!
  defaultThreadRole: AllowedWritingRole!
  description: String!
  id: ID!
  moderators: [Persona!]!
  posts: [Post!]!
  privilege: Privilege!
  title: String!
}

enum ContentType {
  EMOJI
  IMAGE
  LINK
  TEXT
  VIDEO
}

"""
A date string, such as 2007-12-03, compliant with the `full-date` format outlined in section 5.6 of the RFC 3339 profile of the ISO 8601 standard for representation of dates and times using the Gregorian calendar.
"""
scalar Date

"""
A date-time string at UTC, such as 2007-12-03T10:15:30Z, compliant with the `date-time` format outlined in section 5.6 of the RFC 3339 profile of the ISO 8601 standard for representation of dates and times using the Gregorian calendar.
"""
scalar DateTime

type DirectMessage {
  createdAt: DateTime!
  id: ID!
  receiver: Persona!
  sender: Persona!
}

type File {
  encoding: String
  filename: String!
  mimetype: String
}

type FollowingBoard {
  board: Board!
  boardId: String!
  createdAt: DateTime!
  deletedAt: DateTime
  id: ID!
  persona: Persona!
  personaId: Int!
}

type Mutation {
  createBoard(description: String!, personaId: Int!, title: String!): Board!
  createDirectMessage(rawContent: String!, receiverId: Int!, senderId: Int!): DirectMessage!
  createFollowingBoard(boardId: String!, personaId: Int!): FollowingBoard!
  createPersona(iconPath: String, name: String!, screenName: String!): Persona!
  createPost(boardId: String!, content: String!, contentType: ContentType!, personaId: Int!, title: String!): Post!
  createReply(content: String!, contentType: ContentType!, personaId: Int!, threadId: String!): Reply!
  createThirdPartyAPIKey(name: String!, type: ThirdPartyAPIKeyType!): ThirdPartyAPIKey!
  createThread(boardId: String!, content: String!, contentType: ContentType!, personaId: Int!, postId: String!): Thread!
  deletePost(personaId: Int!, postId: String!): Post!
  putAttachedImage(files: [Upload!]!, postId: String!): [File!]!
  setPersonaIcon(file: Upload, personaId: Int!): File!
  setTypingStateOnBoard(personaId: Int!, postId: String!): Post!
  unfollowBoard(boardId: String!, personaId: Int!): FollowingBoard!
}

type Persona {
  iconUrl: String!
  id: Int!
  name: String!
  screenName: String!
}

type Post {
  board: Board!
  boardId: String!
  content: String!
  createdAt: DateTime!
  id: ID!
  imageUrls: [String!]!
  persona: Persona!
  privilege: Privilege!
  threads: [Thread!]!
  title: String!
}

type Privilege {
  createChild: Boolean!
  deleteSelf: Boolean!
  readChild: Boolean!
  updateSelf: Boolean!
}

type Query {
  activities(personaId: Int): [Post!]!
  board(id: String!, personaId: Int): Board!
  getFollowingBoard(personaId: Int!): [FollowingBoard!]!
  me: User
  persona(name: String!): Persona!
  personas(names: [String!]!): [Persona]!
  post(id: String!, personaId: Int): Post!
  removeUser(name: String!): Boolean!
  search(query: String!): [SearchResult!]!
}

type Reply {
  content: String!
  createdAt: DateTime!
  id: ID!
  imageUrls: [String!]!
  persona: Persona!
  privilege: Privilege!
  threadId: String!
}

type SearchResult {
  id: String!
  kind: String!
  title: String!
}

type ThirdPartyAPIKey {
  createdAt: DateTime!
  id: ID!
  revokedAt: DateTime
  token: String!
  user: User!
  userId: Int!
}

enum ThirdPartyAPIKeyType {
  BOT
  USER
}

type Thread {
  board: Board!
  boardId: String!
  content: String!
  createdAt: DateTime!
  id: ID!
  imageUrls: [String!]!
  persona: Persona!
  postId: String!
  privilege: Privilege!
  replies: [Reply!]!
}

"""Upload type compatible with graphql-upload"""
scalar Upload

type User {
  personas: [Persona!]!
}